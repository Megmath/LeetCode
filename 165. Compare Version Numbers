/*
Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.
You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.
*/

class Solution {
    public int compareVersion(String version1, String version2) { 
        
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        
        ArrayList<String> arr1 = new ArrayList<>(Arrays.asList(v1));
        ArrayList<String> arr2 = new ArrayList<>(Arrays.asList(v2));
        
        if(arr1.size()>arr2.size()){
            for(int i=arr2.size(); i<arr1.size(); i++)
                arr2.add("0");
        }
        if(arr2.size()>arr1.size()){
            for(int i=arr1.size(); i<arr2.size(); i++)
                arr1.add("0");
        }
        
        int n = arr1.size() > arr2.size() ? arr2.size() : arr1.size();
        int i=0, a1=0, a2=0;
        while(i<n){
            a1 = Integer.parseInt(arr1.get(i));
            a2 = Integer.parseInt(arr2.get(i));
            if(a1>a2)
                return 1;
            else if(a1==a2)
                i++;
            else
                return -1;
        }

        return 0;
    }
}
