/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = new ListNode(0);
        ListNode c2 = new ListNode(0);
        ListNode c3 = new ListNode(0);
        ListNode output = new ListNode(0);
        ListNode head = new ListNode(0);
        c1.next = l1;
        c2.next = l2;
        c3.next = output;
        head.next = output;
        int carry = 0;
        int num = 0;
        int arg1, arg2;
        while(c1.next!=null || c2.next!=null || carry == 1){            
            if(c1.next==null)
                arg1 = 0;
            else
                arg1 = c1.next.val;
            if(c2.next==null)
                arg2 = 0;
            else
                arg2 = c2.next.val;
            if(arg1 + arg2 + carry > 9){                
                num = (arg1 + arg2 + carry)%10;
                carry = 1;
            }
            else{
                num = arg1 + arg2 + carry;
                carry = 0;                
            }
            c3.next.next = new ListNode(num);
            if(c1.next!=null)
                c1.next = c1.next.next;
            if(c2.next!=null)
                c2.next = c2.next.next;
            c3.next = c3.next.next;                
        }
        return head.next.next;        
    }
}
