/*
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(check(s, t))
            return true;
        else
            return false;
    }
    
    public boolean compare(TreeNode node1, TreeNode node2){
        if(node1==null && node2==null)
            return true;
        if(node1==null || node2==null)
            return false;
        return node1.val == node2.val && compare(node1.left, node2.left) && compare(node1.right, node2.right);
    }
    
    public boolean check(TreeNode s, TreeNode t){
        return (s!=null && (compare(s, t) || check(s.left, t) || check(s.right, t)));
    }
}
